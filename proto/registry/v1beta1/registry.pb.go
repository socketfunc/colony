// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/registry/v1beta1/registry.proto

package registryv1beta1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DownloadRequest struct {
	File                 string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadRequest) Reset()         { *m = DownloadRequest{} }
func (m *DownloadRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadRequest) ProtoMessage()    {}
func (*DownloadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba00550ee19faa40, []int{0}
}

func (m *DownloadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadRequest.Unmarshal(m, b)
}
func (m *DownloadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadRequest.Marshal(b, m, deterministic)
}
func (m *DownloadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadRequest.Merge(m, src)
}
func (m *DownloadRequest) XXX_Size() int {
	return xxx_messageInfo_DownloadRequest.Size(m)
}
func (m *DownloadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadRequest proto.InternalMessageInfo

func (m *DownloadRequest) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

type DownloadResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadResponse) Reset()         { *m = DownloadResponse{} }
func (m *DownloadResponse) String() string { return proto.CompactTextString(m) }
func (*DownloadResponse) ProtoMessage()    {}
func (*DownloadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ba00550ee19faa40, []int{1}
}

func (m *DownloadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadResponse.Unmarshal(m, b)
}
func (m *DownloadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadResponse.Marshal(b, m, deterministic)
}
func (m *DownloadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadResponse.Merge(m, src)
}
func (m *DownloadResponse) XXX_Size() int {
	return xxx_messageInfo_DownloadResponse.Size(m)
}
func (m *DownloadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadResponse proto.InternalMessageInfo

func (m *DownloadResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*DownloadRequest)(nil), "colony.registry.v1beta1.DownloadRequest")
	proto.RegisterType((*DownloadResponse)(nil), "colony.registry.v1beta1.DownloadResponse")
}

func init() {
	proto.RegisterFile("proto/registry/v1beta1/registry.proto", fileDescriptor_ba00550ee19faa40)
}

var fileDescriptor_ba00550ee19faa40 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4a, 0x4d, 0xcf, 0x2c, 0x2e, 0x29, 0xaa, 0xd4, 0x2f, 0x33, 0x4c, 0x4a, 0x2d,
	0x49, 0x34, 0x84, 0x0b, 0xe8, 0x81, 0xe5, 0x85, 0xc4, 0x93, 0xf3, 0x73, 0xf2, 0xf3, 0x2a, 0xf5,
	0xe0, 0xc2, 0x50, 0x75, 0x4a, 0xaa, 0x5c, 0xfc, 0x2e, 0xf9, 0xe5, 0x79, 0x39, 0xf9, 0x89, 0x29,
	0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x42, 0x5c, 0x2c, 0x69, 0x99, 0x39, 0xa9, 0x12,
	0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x1a, 0x97, 0x00, 0x42, 0x59, 0x71, 0x41,
	0x7e, 0x5e, 0x71, 0x2a, 0x48, 0x5d, 0x4a, 0x62, 0x49, 0x22, 0x58, 0x1d, 0x4f, 0x10, 0x98, 0x6d,
	0x94, 0xcb, 0xc5, 0x11, 0x04, 0xb5, 0x42, 0x28, 0x91, 0x8b, 0x03, 0xa6, 0x47, 0x48, 0x43, 0x0f,
	0x87, 0x03, 0xf4, 0xd0, 0x6c, 0x97, 0xd2, 0x24, 0x42, 0x25, 0xc4, 0x01, 0x06, 0x8c, 0x4e, 0x95,
	0x5c, 0xd2, 0xc9, 0xf9, 0xb9, 0xb8, 0x74, 0x38, 0xf1, 0xc2, 0xdc, 0x12, 0x00, 0x0a, 0x84, 0x00,
	0xc6, 0x28, 0x7e, 0x98, 0x12, 0xa8, 0x8a, 0x45, 0x4c, 0xcc, 0xce, 0x41, 0x11, 0xab, 0x98, 0xc4,
	0x9d, 0x21, 0x26, 0xc0, 0xd4, 0xeb, 0x85, 0x19, 0x3a, 0x81, 0xe4, 0x4f, 0xc1, 0x64, 0x62, 0x60,
	0x32, 0x31, 0x50, 0x99, 0x24, 0x36, 0x70, 0xc0, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2a,
	0x99, 0xd1, 0xed, 0x81, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Registry_DownloadClient, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (Registry_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Registry_serviceDesc.Streams[0], "/colony.registry.v1beta1.Registry/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &registryDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Registry_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type registryDownloadClient struct {
	grpc.ClientStream
}

func (x *registryDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	Download(*DownloadRequest, Registry_DownloadServer) error
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RegistryServer).Download(m, &registryDownloadServer{stream})
}

type Registry_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type registryDownloadServer struct {
	grpc.ServerStream
}

func (x *registryDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "colony.registry.v1beta1.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _Registry_Download_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/registry/v1beta1/registry.proto",
}
